/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view.QLPM;

import dao.DAO;
import dao.NhanVienDAO;
import database.CTPhieuMuon;
import database.PhieuMuon;
import database.TTPhieuMuon;
import database.TablePhieuMuon;
import database.ThietBi;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.MessagingException;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.BoxLayout;
import javax.swing.table.DefaultTableModel;
import model.Mail;
import view.LoadingDialog;
import view.TCPanel;

/**
 *
 * @author henry
 */
public class TraTB extends javax.swing.JFrame {

    public TraTB(TCPanel root) {
        initComponents();
        this.root = root;
        this.jlbPhongHoc.setText(root.getPhongHocLabel());
        String sql = "Select MAPM, THOIDIEMLAP, HAN FROM PHIEUMUON WHERE MAPHONG = '" + jlbPhongHoc.getText() + "' AND TRANGTHAI = 6";
        ResultSet rs = DAO.executeSelectSp(sql);
        try {
            if (rs.next()) {
                jlbMaPM.setText(rs.getString("MAPM"));
                isOutOfDate = isQuaHan(rs.getTimestamp("HAN"));
                SimpleDateFormat fmt = new SimpleDateFormat("HH:mm dd/MM/yyyy");
                jlbNgayLap.setText(fmt.format(rs.getTimestamp("THOIDIEMLAP")));
                jlbHan.setText(fmt.format(rs.getTimestamp("HAN")));
                if (isOutOfDate) {
                    jbtnThongBao.setEnabled(true);
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            return;
        }
        setLocationRelativeTo(null);
        init();
        setVisible(true);
    }

    public void init() {
        themThietBi();
        refreshTable();
    }

    public void refreshTable() {
        String sql = "Exec sp_getCTPHIEUMUON '" + jlbMaPM.getText() + "'";
        DefaultTableModel tbModel = (DefaultTableModel) jtbThietBi.getModel();
        tbModel.setRowCount(0);
        ResultSet rs = DAO.executeSelectSp(sql);
        try {
            while (rs.next()) {
                tbModel.addRow(new Object[]{rs.getString("MATB"), rs.getString("TENTB"),
                    rs.getString("MSSV"),
                    rs.getString("TENSV"),
                    rs.getString("EMAIL"),
                    rs.getString("SDT"),
                    (rs.getInt("TRANGTHAI") == 6 ? (isOutOfDate ? "Quá hạn" : "Đang mượn") : "Đã trả")});
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Lỗi lấy thông tin chi tiết phiếu mượn");
        }
    }

    public boolean isQuaHan(Timestamp han) {
        Date today = new Date();
        Timestamp currentTime = new Timestamp(today.getTime());
        return (currentTime.compareTo(han) > 0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jpnPhieuMuonInfor = new javax.swing.JPanel();
        jLabel1_name_phong = new javax.swing.JLabel();
        jlbPhongHoc = new javax.swing.JLabel();
        jLabel6_mapm = new javax.swing.JLabel();
        jlbMaPM = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jlbNgayLap = new javax.swing.JLabel();
        jlbHan = new javax.swing.JLabel();
        jpnContent = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtbThietBi = new javax.swing.JTable();
        jpnCheckLists = new javax.swing.JPanel();
        jlabel_TypeC = new javax.swing.JLabel();
        jButton_tra = new javax.swing.JButton();
        jlabel_HDMI = new javax.swing.JLabel();
        jlabel_micro = new javax.swing.JLabel();
        jlabel_Remote = new javax.swing.JLabel();
        jlabel_Key = new javax.swing.JLabel();
        jlabel_Key1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel_HDMI = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel_DayMicro = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jPanel_Key = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jPanel_Micro = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jPanel_Remote = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jPanel_TypeC = new javax.swing.JPanel();
        jbtnThongBao = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Trả thiết bị");
        setAlwaysOnTop(true);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jpnPhieuMuonInfor.setBackground(new java.awt.Color(204, 204, 204));

        jLabel1_name_phong.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1_name_phong.setText("Tên phòng:");

        jlbPhongHoc.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jlbPhongHoc.setText("PhongHoc");

        jLabel6_mapm.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6_mapm.setText("Mã Phiếu Mượn:");

        jlbMaPM.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jlbMaPM.setText("MaPM");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("Hạn trả:");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Thời điểm lập:");

        jlbNgayLap.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jlbNgayLap.setText("NgayMuon");

        jlbHan.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jlbHan.setText("Han");

        javax.swing.GroupLayout jpnPhieuMuonInforLayout = new javax.swing.GroupLayout(jpnPhieuMuonInfor);
        jpnPhieuMuonInfor.setLayout(jpnPhieuMuonInforLayout);
        jpnPhieuMuonInforLayout.setHorizontalGroup(
            jpnPhieuMuonInforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnPhieuMuonInforLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jpnPhieuMuonInforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpnPhieuMuonInforLayout.createSequentialGroup()
                        .addGroup(jpnPhieuMuonInforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6_mapm)
                            .addComponent(jLabel1_name_phong))
                        .addGap(18, 18, 18)
                        .addGroup(jpnPhieuMuonInforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlbPhongHoc)
                            .addComponent(jlbMaPM)))
                    .addGroup(jpnPhieuMuonInforLayout.createSequentialGroup()
                        .addGroup(jpnPhieuMuonInforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(jpnPhieuMuonInforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlbHan)
                            .addComponent(jlbNgayLap))))
                .addContainerGap(94, Short.MAX_VALUE))
        );
        jpnPhieuMuonInforLayout.setVerticalGroup(
            jpnPhieuMuonInforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnPhieuMuonInforLayout.createSequentialGroup()
                .addGap(88, 88, 88)
                .addGroup(jpnPhieuMuonInforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6_mapm)
                    .addComponent(jlbMaPM))
                .addGap(18, 18, 18)
                .addGroup(jpnPhieuMuonInforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1_name_phong)
                    .addComponent(jlbPhongHoc))
                .addGap(30, 30, 30)
                .addGroup(jpnPhieuMuonInforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jlbNgayLap))
                .addGap(18, 18, 18)
                .addGroup(jpnPhieuMuonInforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jlbHan))
                .addContainerGap(126, Short.MAX_VALUE))
        );

        jtbThietBi.setAutoCreateRowSorter(true);
        jtbThietBi.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã thiết bị", "Thiết bị", "MSSV", "Tên", "Email", "SĐT", "Trạng thái"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtbThietBi.setRowHeight(30);
        jScrollPane1.setViewportView(jtbThietBi);

        javax.swing.GroupLayout jpnContentLayout = new javax.swing.GroupLayout(jpnContent);
        jpnContent.setLayout(jpnContentLayout);
        jpnContentLayout.setHorizontalGroup(
            jpnContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        jpnContentLayout.setVerticalGroup(
            jpnContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );

        jpnCheckLists.setBackground(new java.awt.Color(255, 255, 255));

        jlabel_TypeC.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jlabel_TypeC.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictrue/usb.png"))); // NOI18N
        jlabel_TypeC.setText("Cáp TypeC");

        jButton_tra.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jButton_tra.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictrue/autorenew.png"))); // NOI18N
        jButton_tra.setText("Trả");
        jButton_tra.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton_tra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_traActionPerformed(evt);
            }
        });

        jlabel_HDMI.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jlabel_HDMI.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictrue/settings_input_hdmi.png"))); // NOI18N
        jlabel_HDMI.setText("Cáp HDMI");

        jlabel_micro.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jlabel_micro.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictrue/keyboard_voice.png"))); // NOI18N
        jlabel_micro.setText("Micro");

        jlabel_Remote.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jlabel_Remote.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictrue/remote_gen.png"))); // NOI18N
        jlabel_Remote.setText("Remote");

        jlabel_Key.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jlabel_Key.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictrue/key.png"))); // NOI18N
        jlabel_Key.setText("Chìa Khoá");

        jlabel_Key1.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jlabel_Key1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictrue/key.png"))); // NOI18N
        jlabel_Key1.setText("Dây Micro");

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        jPanel_HDMI.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel_HDMILayout = new javax.swing.GroupLayout(jPanel_HDMI);
        jPanel_HDMI.setLayout(jPanel_HDMILayout);
        jPanel_HDMILayout.setHorizontalGroup(
            jPanel_HDMILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 112, Short.MAX_VALUE)
        );
        jPanel_HDMILayout.setVerticalGroup(
            jPanel_HDMILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 143, Short.MAX_VALUE)
        );

        jScrollPane2.setViewportView(jPanel_HDMI);
        jPanel_HDMI.setLayout(new BoxLayout(jPanel_HDMI, BoxLayout.Y_AXIS));

        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        jPanel_DayMicro.setBackground(new java.awt.Color(255, 255, 255));
        jPanel_DayMicro.setAutoscrolls(true);

        javax.swing.GroupLayout jPanel_DayMicroLayout = new javax.swing.GroupLayout(jPanel_DayMicro);
        jPanel_DayMicro.setLayout(jPanel_DayMicroLayout);
        jPanel_DayMicroLayout.setHorizontalGroup(
            jPanel_DayMicroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 116, Short.MAX_VALUE)
        );
        jPanel_DayMicroLayout.setVerticalGroup(
            jPanel_DayMicroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jScrollPane3.setViewportView(jPanel_DayMicro);
        jPanel_DayMicro.setLayout(new BoxLayout(jPanel_DayMicro, BoxLayout.Y_AXIS));

        jScrollPane4.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        jPanel_Key.setBackground(new java.awt.Color(255, 255, 255));
        jPanel_Key.setAutoscrolls(true);

        javax.swing.GroupLayout jPanel_KeyLayout = new javax.swing.GroupLayout(jPanel_Key);
        jPanel_Key.setLayout(jPanel_KeyLayout);
        jPanel_KeyLayout.setHorizontalGroup(
            jPanel_KeyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 109, Short.MAX_VALUE)
        );
        jPanel_KeyLayout.setVerticalGroup(
            jPanel_KeyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jScrollPane4.setViewportView(jPanel_Key);
        jPanel_Key.setLayout(new BoxLayout(jPanel_Key, BoxLayout.Y_AXIS));

        jScrollPane5.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        jPanel_Micro.setBackground(new java.awt.Color(255, 255, 255));
        jPanel_Micro.setAutoscrolls(true);

        javax.swing.GroupLayout jPanel_MicroLayout = new javax.swing.GroupLayout(jPanel_Micro);
        jPanel_Micro.setLayout(jPanel_MicroLayout);
        jPanel_MicroLayout.setHorizontalGroup(
            jPanel_MicroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 116, Short.MAX_VALUE)
        );
        jPanel_MicroLayout.setVerticalGroup(
            jPanel_MicroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jScrollPane5.setViewportView(jPanel_Micro);
        jPanel_Micro.setLayout(new BoxLayout(jPanel_Micro, BoxLayout.Y_AXIS));

        jScrollPane6.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        jPanel_Remote.setBackground(new java.awt.Color(255, 255, 255));
        jPanel_Remote.setAutoscrolls(true);

        javax.swing.GroupLayout jPanel_RemoteLayout = new javax.swing.GroupLayout(jPanel_Remote);
        jPanel_Remote.setLayout(jPanel_RemoteLayout);
        jPanel_RemoteLayout.setHorizontalGroup(
            jPanel_RemoteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 116, Short.MAX_VALUE)
        );
        jPanel_RemoteLayout.setVerticalGroup(
            jPanel_RemoteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jScrollPane6.setViewportView(jPanel_Remote);
        jPanel_Remote.setLayout(new BoxLayout(jPanel_Remote, BoxLayout.Y_AXIS));

        jScrollPane7.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        jPanel_TypeC.setBackground(new java.awt.Color(255, 255, 255));
        jPanel_TypeC.setAutoscrolls(true);

        javax.swing.GroupLayout jPanel_TypeCLayout = new javax.swing.GroupLayout(jPanel_TypeC);
        jPanel_TypeC.setLayout(jPanel_TypeCLayout);
        jPanel_TypeCLayout.setHorizontalGroup(
            jPanel_TypeCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 105, Short.MAX_VALUE)
        );
        jPanel_TypeCLayout.setVerticalGroup(
            jPanel_TypeCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jScrollPane7.setViewportView(jPanel_TypeC);
        jPanel_TypeC.setLayout(new BoxLayout(jPanel_TypeC, BoxLayout.Y_AXIS));

        jbtnThongBao.setBackground(new java.awt.Color(255, 204, 204));
        jbtnThongBao.setText("Thông báo quá hạn");
        jbtnThongBao.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jbtnThongBao.setEnabled(false);
        jbtnThongBao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnThongBaoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpnCheckListsLayout = new javax.swing.GroupLayout(jpnCheckLists);
        jpnCheckLists.setLayout(jpnCheckListsLayout);
        jpnCheckListsLayout.setHorizontalGroup(
            jpnCheckListsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnCheckListsLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jpnCheckListsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlabel_HDMI)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addGroup(jpnCheckListsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlabel_Key1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addGroup(jpnCheckListsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlabel_Key)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addGroup(jpnCheckListsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlabel_micro)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addGroup(jpnCheckListsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlabel_Remote)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addGroup(jpnCheckListsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpnCheckListsLayout.createSequentialGroup()
                        .addComponent(jlabel_TypeC)
                        .addGap(257, 257, 257))
                    .addGroup(jpnCheckListsLayout.createSequentialGroup()
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                        .addGroup(jpnCheckListsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton_tra, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jbtnThongBao, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(42, 42, 42))))
        );
        jpnCheckListsLayout.setVerticalGroup(
            jpnCheckListsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnCheckListsLayout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addGroup(jpnCheckListsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpnCheckListsLayout.createSequentialGroup()
                        .addComponent(jlabel_HDMI)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpnCheckListsLayout.createSequentialGroup()
                        .addGroup(jpnCheckListsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpnCheckListsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jpnCheckListsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jpnCheckListsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jlabel_Key)
                                        .addComponent(jlabel_Key1))
                                    .addComponent(jlabel_micro, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addComponent(jlabel_Remote, javax.swing.GroupLayout.Alignment.TRAILING))
                            .addComponent(jlabel_TypeC, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGroup(jpnCheckListsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpnCheckListsLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(jpnCheckListsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jpnCheckListsLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jpnCheckListsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jpnCheckListsLayout.createSequentialGroup()
                                        .addComponent(jButton_tra, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jbtnThongBao, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jpnCheckLists, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jpnContent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jpnPhieuMuonInfor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jpnContent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jpnPhieuMuonInfor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpnCheckLists, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_traActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_traActionPerformed
        tra();
    }//GEN-LAST:event_jButton_traActionPerformed

    private void jbtnThongBaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnThongBaoActionPerformed
        int index = jtbThietBi.getSelectedRow();
        if (index == -1) {
            JOptionPane.showMessageDialog(this, "Chọn sinh viên bạn muốn gửi thông báo");
            return;
        }

        LoadingDialog ld = new LoadingDialog(this, "Đang xử lí");
        new Thread(() -> {
            ld.setVisible(true);
        }).start();

        // Lấy thông tin thiết bị đang mượn
        ArrayList<String> tb = new ArrayList<>();
        String sql = "Select DISTINCT THIETBI.MATB, TENLOAI "
                + "FROM CTPHIEUMUON inner join THIETBI on CTPHIEUMUON.MATB = THIETBI.MATB "
                + "inner join LOAITHIETBI on THIETBI.MALOAI = LOAITHIETBI.MALOAI "
                + "Where MAPM = '" + jlbMaPM.getText() + "' AND CTPHIEUMUON.TRANGTHAI = 6";
        Map<String, Integer> ct_thietBi = new HashMap<>();
        ResultSet rs = DAO.executeSelectSp(sql);
        try {
            while (rs.next()) {
                if (!ct_thietBi.containsKey(rs.getString("TENLOAI"))) {
                    ct_thietBi.put(rs.getString("TENLOAI"), 1);
                } else {
                    int val = ct_thietBi.get(rs.getString("TENLOAI")) + 1;
                    ct_thietBi.put(rs.getString("TENLOAI"), val);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(TraTB.class.getName()).log(Level.SEVERE, null, ex);
        }

        for (String x : ct_thietBi.keySet()) {
            tb.add(ct_thietBi.get(x) + " " + x);
        }

        try {
            Mail.sendMessageOutOfDate(jtbThietBi.getValueAt(index, 4).toString(), tb);
            JOptionPane.showMessageDialog(this, "Gửi mail thành công");
        } catch (MessagingException ex) {
            JOptionPane.showMessageDialog(this, "Gửi mail thất bại\n Vui lòng kiểm tra lại mật khẩu email của bạn, địa chỉ email của sinh viên cần thông báo", "Lỗi", JOptionPane.ERROR_MESSAGE);
        } finally {
            ld.setVisible(false);
        }
    }//GEN-LAST:event_jbtnThongBaoActionPerformed

    public void themThietBi() {
        jPanel_DayMicro.removeAll();
        jPanel_HDMI.removeAll();
        jPanel_Key.removeAll();
        jPanel_Micro.removeAll();
        jPanel_Remote.removeAll();
        jPanel_TypeC.removeAll();
        themHDMI();
        themDayMicro();
        themKey();
        themMicro();
        themRemote();
        themTypec();
    }

    public void themHDMI() {
        Jcheckbox_HDMI = new ArrayList<>();
        String mapm = jlbMaPM.getText();
        String maloai = "HDMI";
        List<ThietBi> lists = new ArrayList<>();
        try {
            lists.addAll(ThietBi.getThietBiDangMuon(mapm, maloai));
        } catch (Exception e) {
            System.out.println("An error occurred while retrieving the data from the database: " + e.getMessage());
            return;
        }
        for (ThietBi a : lists) {
            JCheckBox n = new JCheckBox();
            n.setText(a.getMATB());
            Jcheckbox_HDMI.add(n);
            jPanel_HDMI.add(n);
        }
        jPanel_HDMI.revalidate();
        jPanel_HDMI.repaint();
    }

    public void themDayMicro() {
        Jcheckbox_DAYMR = new ArrayList<>();

        String maloai = "DMC";
        List<ThietBi> lists = new ArrayList<>();
        try {
            lists.addAll(ThietBi.getThietBiDangMuon(jlbMaPM.getText(), maloai));

        } catch (Exception e) {
            System.out.println("An error occurred while retrieving the data from the database: " + e.getMessage());
            return;
        }
        for (ThietBi a : lists) {
            JCheckBox n = new JCheckBox();
            n.setText(a.getMATB());
            Jcheckbox_DAYMR.add(n);
            jPanel_DayMicro.add(n);
        }
        jPanel_DayMicro.revalidate();
        jPanel_DayMicro.repaint();
    }

    public void themKey() {
        Jcheckbox_KEY = new ArrayList<>();

        String maloai = "KEY";
        List<ThietBi> lists = new ArrayList<>();
        try {
            lists.addAll(ThietBi.getThietBiDangMuon(jlbMaPM.getText(), maloai));
        } catch (Exception e) {
            System.out.println("An error occurred while retrieving the data from the database: " + e.getMessage());
            return;
        }
        for (ThietBi a : lists) {

            JCheckBox n = new JCheckBox();
            n.setText(a.getMATB());
            Jcheckbox_KEY.add(n);
            jPanel_Key.add(n);
        }
        jPanel_Key.revalidate();
        jPanel_Key.repaint();

    }

    public void themMicro() {
        Jcheckbox_MICRO = new ArrayList<>();

        String maphong = jlbMaPM.getText();
        String maloai = "MR";
        List<ThietBi> lists = new ArrayList<>();
        try {
            lists.addAll(ThietBi.getThietBiDangMuon(jlbMaPM.getText(), maloai));
        } catch (Exception e) {
            System.out.println("An error occurred while retrieving the data from the database: " + e.getMessage());
            return;
        }
        for (ThietBi a : lists) {

            JCheckBox n = new JCheckBox();
            n.setText(a.getMATB());
            Jcheckbox_MICRO.add(n);
            jPanel_Micro.add(n);
        }
        jPanel_Micro.revalidate();
        jPanel_Micro.repaint();
    }

    public void themRemote() {
        Jcheckbox_REMOTE = new ArrayList<>();

        String maloai = "RM";
        List<ThietBi> lists = new ArrayList<>();
        try {
            lists.addAll(ThietBi.getThietBiDangMuon(jlbMaPM.getText(), maloai));
        } catch (Exception e) {
            System.out.println("An error occurred while retrieving the data from the database: " + e.getMessage());
            return;
        }
        for (ThietBi a : lists) {

            JCheckBox n = new JCheckBox();
            n.setText(a.getMATB());
            Jcheckbox_REMOTE.add(n);
            jPanel_Remote.add(n);
        }
        jPanel_Remote.revalidate();
        jPanel_Remote.repaint();

    }

    public void themTypec() {
        Jcheckbox_TYPEC = new ArrayList<>();
        String maloai = "TYPEC";
        List<ThietBi> lists = new ArrayList<>();
        try {
            lists.addAll(ThietBi.getThietBiDangMuon(jlbMaPM.getText(), maloai));
        } catch (Exception e) {
            System.out.println("An error occurred while retrieving the data from the database: " + e.getMessage());
            return;
        }

        for (ThietBi a : lists) {

            JCheckBox n = new JCheckBox();
            n.setText(a.getMATB());
            Jcheckbox_TYPEC.add(n);
            jPanel_TypeC.add(n);
        }
        jPanel_TypeC.revalidate();
        jPanel_TypeC.repaint();
    }

    
    public List<String> getSelectedDevice() {
        List<String> list = new ArrayList<>();

        for (JCheckBox a : Jcheckbox_HDMI) {
            if (a.isSelected()) {
                list.add(a.getText());
            }
        }

        for (JCheckBox a : Jcheckbox_DAYMR) {
            if (a.isSelected()) {
                list.add(a.getText());
            }
        }

        for (JCheckBox a : Jcheckbox_KEY) {
            if (a.isSelected()) {
                list.add(a.getText());
            }
        }

        for (JCheckBox a : Jcheckbox_MICRO) {
            if (a.isSelected()) {
                list.add(a.getText());
            }
        }

        for (JCheckBox a : Jcheckbox_REMOTE) {
            if (a.isSelected()) {
                list.add(a.getText());
            }
        }

        for (JCheckBox a : Jcheckbox_TYPEC) {
            if (a.isSelected()) {
                list.add(a.getText());
            }
        }

        return list;
    }

    public void tra() {
        List<String> list = getSelectedDevice();
        // Nếu không có thiết bị nào được chọn để trả
        if (list.isEmpty()) {
            String sql = "Select * From CTPHIEUMUON Where MAPM = '" + jlbMaPM.getText() + "' AND TRANGTHAI = 6";
            ResultSet rs = DAO.executeSelectSp(sql);
            try {
                // Nếu vẫn còn ct phiếu mượn chưa trả
                if (rs.next()) {
                    JOptionPane.showMessageDialog(this, "Chọn thiết bị để trả");
                } // Nếu không còn ct phiếu mượn nào đang mượn thì trả phòng
                else {
                    if (JOptionPane.showConfirmDialog(this, "Bạn muốn trả phòng", "Xác nhận", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                        try {
                            DAO.executeUpdateSp("Update PHIEUMUON SET TRANGTHAI = 7 WHERE MAPM = '" + jlbMaPM.getText() + "'");
                            root.refresh();
                            root.getPr().refreshAll();
                            JOptionPane.showMessageDialog(this, "Trả phòng thành công");
                            this.dispose();
                        } catch (SQLException ex) {
                            JOptionPane.showMessageDialog(this, "Error " + ex.getMessage());
                        }
                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(TraTB.class.getName()).log(Level.SEVERE, null, ex);
            }
        } // Nếu có chọn thiết bị để trả
        else {
            if (JOptionPane.showConfirmDialog(this, "Xác nhận trả thiết bị", "Xác nhận", JOptionPane.YES_NO_OPTION) == JOptionPane.NO_OPTION) {
                return;
            }
            for (String a : list) {
                String sql = "EXEC sp_TraThietBi '" + jlbMaPM.getText() + "', '" + a + "'";
                try {
                    DAO.executeUpdateSp(sql);
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, "Error" + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
            themThietBi();
            refreshTable();
            root.getPr().getTbPanel().refresh();
            root.getPr().getTkPanel().refresh();
            JOptionPane.showMessageDialog(this, "Trả thiết bị thành công");
        }
    }

    private TCPanel root;
    private boolean isOutOfDate;
    private List<JCheckBox> Jcheckbox_HDMI;
    private List<JCheckBox> Jcheckbox_DAYMR;
    private List<JCheckBox> Jcheckbox_KEY;
    private List<JCheckBox> Jcheckbox_REMOTE;
    private List<JCheckBox> Jcheckbox_TYPEC;
    private List<JCheckBox> Jcheckbox_MICRO;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_tra;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel1_name_phong;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel6_mapm;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel_DayMicro;
    private javax.swing.JPanel jPanel_HDMI;
    private javax.swing.JPanel jPanel_Key;
    private javax.swing.JPanel jPanel_Micro;
    private javax.swing.JPanel jPanel_Remote;
    private javax.swing.JPanel jPanel_TypeC;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JButton jbtnThongBao;
    private javax.swing.JLabel jlabel_HDMI;
    private javax.swing.JLabel jlabel_Key;
    private javax.swing.JLabel jlabel_Key1;
    private javax.swing.JLabel jlabel_Remote;
    private javax.swing.JLabel jlabel_TypeC;
    private javax.swing.JLabel jlabel_micro;
    private javax.swing.JLabel jlbHan;
    private javax.swing.JLabel jlbMaPM;
    private javax.swing.JLabel jlbNgayLap;
    private javax.swing.JLabel jlbPhongHoc;
    private javax.swing.JPanel jpnCheckLists;
    private javax.swing.JPanel jpnContent;
    private javax.swing.JPanel jpnPhieuMuonInfor;
    private javax.swing.JTable jtbThietBi;
    // End of variables declaration//GEN-END:variables
}
